import { NextRequest, NextResponse } from 'next/server';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
export function detectLanguage(text: string): 'ru' | 'en' {
  // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
  const cyrillicRegex = /[–∞-—è—ë–ê-–Ø–Å]/;
  const hasCyrillic = cyrillicRegex.test(text);

  console.log('üîç Language detection details:', {
    text: text.slice(0, 50) + '...',
    hasCyrillic,
    detected: hasCyrillic ? 'ru' : 'en'
  });

  return hasCyrillic ? 'ru' : 'en';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è –æ–±–æ–∏—Ö —è–∑—ã–∫–æ–≤)
export function hasPeopleInPrompt(text: string): boolean {
  const russianKeywords = ['—á–µ–ª–æ–≤–µ–∫', '–ª—é–¥–∏', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—É—à–∫–∞', '–ø–∞—Ä–µ–Ω—å', '—Ä–µ–±–µ–Ω–æ–∫', '–º–∞–ª—å—á–∏–∫', '–¥–µ–≤–æ—á–∫–∞', '–ø–æ—Ä—Ç—Ä–µ—Ç', '–ª–∏—Ü–æ', '–ø–µ—Ä—Å–æ–Ω–∞', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–º–æ–¥–µ–ª—å', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ', '—Ñ–æ—Ç–æ', '—Å–Ω–∏–º–æ–∫'];
  const englishKeywords = ['person', 'people', 'man', 'woman', 'girl', 'boy', 'child', 'portrait', 'face', 'character', 'model', 'photographer', 'photo', 'shot', 'headshot', 'selfie', 'team', 'professional', 'business', 'owner'];

  const allKeywords = [...russianKeywords, ...englishKeywords];
  return allKeywords.some(keyword =>
    text.toLowerCase().includes(keyword.toLowerCase())
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
export async function translateToEnglish(text: string): Promise<string> {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiKey = process.env.GOOGLE_AI_API_KEY;

    if (!apiKey) {
      console.warn('‚ö†Ô∏è No API key for translation, using original text');
      return text;
    }

    console.log('üîÑ Starting translation for:', text);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏ endpoint
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Translate the following Russian text to English for image generation. Return ONLY the English translation, nothing else: "${text}"`
            }]
          }],
          generationConfig: {
            temperature: 0.1, // –£–º–µ–Ω—å—à–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2000, // –£–º–µ–Ω—å—à–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥
            stopSequences: [] // –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ø-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          },
          safetySettings: [ // –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      }
    );

    console.log('üì• Translation API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Translation API error:', {
        status: response.status,
        error: errorText
      });
      return text;
    }

    const data = await response.json();
    console.log('üìä Translation API response:', JSON.stringify(data, null, 2));


    const translation = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    console.log('üîç Translation result analysis:', {
      original: text,
      translation: translation,
      isDifferent: translation !== text,
      translationLength: translation?.length || 0
    });

    if (!data.candidates || data.candidates.length === 0) {
      console.error('‚ùå No candidates in translation response:', data);
      return text;
    }
    
    if (!data.candidates[0]?.content?.parts?.[0]?.text) {
      console.error('‚ùå No text content in translation response:', data);
      return text;
    }

    if (translation && translation.trim().length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
      if (translation.trim() !== text.trim()) {
        console.log('‚úÖ Translation successful:', {
          original: text.slice(0, 50) + '...',
          translated: translation.slice(0, 50) + '...'
        });
        return translation;
      } else {
        console.log('‚ö†Ô∏è Translation returned same text as original');
        return text;
      }
    } else {
      console.warn('‚ö†Ô∏è Translation returned invalid result, using original text');
      return text;
    }
  } catch (error) {
    console.error('üí• Translation error:', error);
    return text;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å–ª–∞–≤—è–Ω—Å–∫–æ–π –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
export function addSlavicPrompts(text: string): string {
  if (hasPeopleInPrompt(text)) {
    console.log('üë• People detected in prompt, adding Slavic appearance prompts');
    return `${text}, Slavic features, Eastern European appearance, light skin, light eyes, straight nose, round face, soft features`;
  }

  return text;
}

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Imagen API endpoint called');

    const body = await request.json();
    console.log('üìù Request body:', body);

    const { prompt, numberOfImages = 1, imageSize = '1K', aspectRatio = '1:1', modelVersion = 'imagen-4.0-generate-001' } = body;

    if (!prompt) {
      console.error('‚ùå No prompt provided');
      return NextResponse.json({ error: 'Prompt is required' }, { status: 400 });
    }

    console.log('üé® Image generation parameters:', {
      prompt: prompt.slice(0, 50) + '...',
      numberOfImages,
      imageSize,
      aspectRatio,
      modelVersion
    });

    const apiKey = process.env.GOOGLE_AI_API_KEY;
    console.log('üîë API Key check:', {
      exists: !!apiKey,
      length: apiKey?.length || 0,
      startsWith: apiKey?.substring(0, 10) || 'N/A',
      usingGoogleAI: !!process.env.GOOGLE_AI_API_KEY
    });

    if (!apiKey) {
      console.error('‚ùå API key not configured');
      return NextResponse.json({
        error: 'API key not configured. Please check your .env.local file'
      }, { status: 500 });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const language = detectLanguage(prompt);
    console.log('üåê Language detected:', language);

    let finalPrompt = prompt;
    let wasTranslated = false;

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    if (language === 'ru') {
      console.log('üîÑ Translating Russian prompt to English...');
      const translation = await translateToEnglish(prompt);
      console.log('üîÑ Translation result:', {
        original: prompt,
        translated: translation,
        isDifferent: translation !== prompt
      });

      if (translation !== prompt) {
        finalPrompt = translation;
        wasTranslated = true;
        console.log('‚úÖ Translation successful');
      } else {
        console.log('‚ö†Ô∏è Translation returned same text');
      }
    } else {
      console.log('‚úÖ Prompt is already in English');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–¥–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–≤—è–Ω—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const hasPeople = hasPeopleInPrompt(finalPrompt);
    console.log('üë• People detected in final prompt:', hasPeople);

    if (hasPeople) {
      const beforeSlavic = finalPrompt;
      finalPrompt = addSlavicPrompts(finalPrompt);
      console.log('üá∑üá∫ Slavic prompts added:', finalPrompt !== beforeSlavic);
    }

    console.log('üé® Final processing result:', {
      originalPrompt: prompt.slice(0, 50) + '...',
      finalPrompt: finalPrompt.slice(0, 50) + '...',
      language,
      wasTranslated,
      hasPeople,
      hasSlavicPrompts: hasPeople,
      numberOfImages,
      imageSize,
      aspectRatio
    });

    const requestBody = {
      instances: [
        {
          prompt: finalPrompt
        }
      ],
      parameters: {
        sampleCount: numberOfImages,
        imageSize: imageSize,
        aspectRatio: aspectRatio,
        personGeneration: 'allow_adult'
      }
    };

    console.log('üì§ Sending request to Imagen API:', JSON.stringify(requestBody, null, 2));

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${modelVersion}:predict`,
      {
        method: 'POST',
        headers: {
          'x-goog-api-key': apiKey,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      }
    );

    console.log('üì• Imagen API response status:', response.status);

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Imagen API error:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });

      return NextResponse.json({
        error: 'Failed to generate images',
        status: response.status,
        details: errorData
      }, { status: response.status });
    }

    const data = await response.json();
    console.log('‚úÖ Imagen API response received');

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const predictions = data.predictions || [];
    console.log('üîç Predictions found:', predictions.length);

    if (predictions.length === 0) {
      console.warn('‚ö†Ô∏è No predictions returned');
      return NextResponse.json({
        success: true,
        images: [],
        message: 'No predictions were returned'
      });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º predictions –≤ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = predictions.map((prediction: {
      bytesBase64Encoded?: string;
      mimeType?: string;
    }, index: number) => {
      console.log(`üñºÔ∏è Processing prediction ${index + 1}:`, {
        hasBytes: !!prediction.bytesBase64Encoded,
        hasMimeType: !!prediction.mimeType,
        bytesLength: prediction.bytesBase64Encoded?.length || 0
      });

      return {
        imageBytes: prediction.bytesBase64Encoded,
        mimeType: prediction.mimeType || 'image/png',
        index: index + 1
      };
    });

    console.log(`üéâ Successfully processed ${images.length} images`);

    return NextResponse.json({
      success: true,
      images: images,
      count: images.length,
      translation: {
        original: prompt,
        translated: finalPrompt,
        language: language,
        wasTranslated: wasTranslated,
        hasSlavicPrompts: hasPeople
      }
    });

  } catch (error) {
    console.error('üí• Imagen generation error:', error);

    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}