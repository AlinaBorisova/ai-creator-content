import { NextRequest, NextResponse } from 'next/server';
import { detectLanguage, hasPeopleInPrompt, translateToEnglish, addSlavicPrompts } from '@/app/api/ai/imagen/route';

export async function POST(request: NextRequest) {
  try {
    console.log('üé¨ Veo API endpoint called');

    const body = await request.json();
    console.log('üìù Request body:', body);

    const {
      prompt,
      referenceImages = [],
      modelVersion = 'veo-2.0-generate-001',
      durationSeconds = '8',
      aspectRatio = '16:9',
      resolution = '720p'
    } = body;

    if (!prompt) {
      console.error('‚ùå No prompt provided');
      return NextResponse.json({ error: 'Prompt is required' }, { status: 400 });
    }

    const apiKey = process.env.GOOGLE_AI_API_KEY;
    if (!apiKey) {
      console.error('‚ùå API key not configured');
      return NextResponse.json({
        error: 'API key not configured. Please check your .env.local file'
      }, { status: 500 });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const language = detectLanguage(prompt);
    let finalPrompt = prompt;
    let wasTranslated = false;

    if (language === 'ru') {
      console.log('üîÑ Translating Russian prompt to English...');
      const translation = await translateToEnglish(prompt);
      if (translation !== prompt) {
        finalPrompt = translation;
        wasTranslated = true;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–¥–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–≤—è–Ω—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const hasPeople = hasPeopleInPrompt(finalPrompt);
    if (hasPeople) {
      finalPrompt = addSlavicPrompts(finalPrompt);
    }

    console.log('üé¨ Final processing result:', {
      originalPrompt: prompt.slice(0, 50) + '...',
      finalPrompt: finalPrompt.slice(0, 50) + '...',
      language,
      wasTranslated,
      hasPeople,
      referenceImagesCount: referenceImages.length
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedImages = await Promise.all(
      referenceImages.map(async (img: { file: string; name: string; size: number }) => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
        const base64Data = img.file.split(',')[1];
        return {
          mimeType: img.file.split(',')[0].split(':')[1].split(';')[0],
          data: base64Data
        };
      })
    );

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const requestBody = {
      instances: [{
        prompt: finalPrompt,
        ...(processedImages.length > 0 && {
          image: processedImages[0] // Veo –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–¥–Ω–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        })
      }]
      // ‚ùå –£–ë–†–ê–ù–û –ø–æ–ª–µ "config" - –æ–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API
    };

    console.log('üì§ Sending request to Veo API:', JSON.stringify(requestBody, null, 2));
    console.log('üîó URL:', `https://generativelanguage.googleapis.com/v1beta/models/${modelVersion}:predictLongRunning`);
    console.log('üéØ –ú–æ–¥–µ–ª—å:', modelVersion);
    console.log('‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', durationSeconds, '—Å–µ–∫—É–Ω–¥');
    console.log('üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:', aspectRatio);
    console.log('üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:', resolution);
    console.log('üñºÔ∏è –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', processedImages.length > 0 ? `${processedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π` : '–ù–µ—Ç');
    console.log('üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', finalPrompt);

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${modelVersion}:predictLongRunning?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Veo API error:', {
        status: response.status,
        error: errorText
      });
      return NextResponse.json({ error: 'Failed to generate video' }, { status: response.status });
    }

    const data = await response.json();
    console.log('üìä Veo API response:', JSON.stringify(data, null, 2));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è polling
    return NextResponse.json({
      success: true,
      operation: data.name,
      translation: {
        original: prompt,
        translated: finalPrompt,
        language: language,
        wasTranslated: wasTranslated,
        hasSlavicPrompts: hasPeople
      }
    });

  } catch (error) {
    console.error('üí• Veo generation error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}