// src/app/components/MessageFetcher.tsx (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–û–ú–ü–û–ù–ï–ù–¢–û–ú <Image>)

"use client";

import { useState, useTransition } from 'react';
// –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Image –∏–∑ Next.js
import Image from 'next/image';
import { getTelegramMessagesAction, rewriteTextAction, generateImageAction, sendPostAction } from '@/app/actions';

/**
 * @interface PostState
 * @description –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞,
 * –≤–∫–ª—é—á–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–µ—Ä–∞—Ü–∏–π.
 */
interface PostState {
  id: number;
  originalText: string;
  reactions: number;
  cleanText?: string;
  prompt?: string | null;
  imageUrls?: string[];
  selectedImageUrl?: string;
  isRewriting: boolean;
  isGeneratingImage: boolean;
  isSending: boolean;
  isSent: boolean;
}

/**
 * @component MessageFetcher
 * @description –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º:
 * –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –¥–æ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.
 */
export function MessageFetcher() {
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
  const [sourceChannelId, setSourceChannelId] = useState('');
  const [destinationChannelId, setDestinationChannelId] = useState('');
  const [posts, setPosts] = useState<PostState[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isFetching, startFetchingTransition] = useTransition();

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

  /**
   * @function handleFetchMessages
   * @description –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —ç–∫—à–µ–Ω.
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
   */
  const handleFetchMessages = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setError(null);
    setPosts([]);
    startFetchingTransition(async () => {
      const result = await getTelegramMessagesAction(sourceChannelId);
      if (result.error) {
        setError(result.error);
      } else if (result.data) {
        const initialPosts = result.data.map((postData, index) => ({
          id: index,
          originalText: postData.text,
          reactions: postData.reactions,
          isRewriting: false,
          isGeneratingImage: false,
          isSending: false,
          isSent: false,
        }));
        setPosts(initialPosts);
      }
    });
  };

  /**
   * @function handleRewrite
   * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—Ä–∞–π—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
   * –ü—Ä–∏ –Ω–æ–≤–æ–º —Ä–µ—Ä–∞–π—Ç–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç.
   */
  const handleRewrite = (postId: number) => {
    const post = posts.find(p => p.id === postId);
    if (!post) return;
    setPosts(posts.map(p => p.id === postId ? { ...p, isRewriting: true, isSent: false, imageUrls: undefined, selectedImageUrl: undefined, cleanText: undefined, prompt: undefined } : p));
    startFetchingTransition(async () => {
      const result = await rewriteTextAction(post.originalText);
      setPosts(prevPosts => prevPosts.map(p => {
        if (p.id === postId) {
          return { ...p, isRewriting: false, cleanText: result.data?.cleanText, prompt: result.data?.prompt };
        }
        return p;
      }));
    });
  };

  /**
   * @function handleGenerateImage
   * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ç—ã—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞.
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞.
   */
  const handleGenerateImage = (postId: number) => {
    const post = posts.find(p => p.id === postId);
    if (!post || !post.prompt || post.prompt === 'no prompt') return;
    setPosts(posts.map(p => p.id === postId ? { ...p, isGeneratingImage: true, isSent: false, imageUrls: undefined, selectedImageUrl: undefined } : p));
    startFetchingTransition(async () => {
      const result = await generateImageAction(post.prompt!);
      if (result.error) {
        alert(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${result.error}`);
      }
      setPosts(prevPosts => prevPosts.map(p => {
        if (p.id === postId) {
          return { ...p, isGeneratingImage: false, imageUrls: result.data };
        }
        return p;
      }));
    });
  };

  /**
   * @function handleSelectImage
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,
   * —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ URL –∫–∞–∫ "–≤—ã–±—Ä–∞–Ω–Ω—ã–π" –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
   */
  const handleSelectImage = (postId: number, imageUrl: string) => {
    setPosts(posts.map(p =>
      p.id === postId ? { ...p, selectedImageUrl: imageUrl } : p
    ));
  };

  /**
   * @function handleSendPost
   * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
   * –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
   */
  const handleSendPost = (postId: number) => {
    const post = posts.find(p => p.id === postId);
    if (!post || !post.cleanText || !post.selectedImageUrl || !destinationChannelId) {
      alert("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏–º–µ—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –í–´–ë–†–ê–¢–¨ –æ–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.");
      return;
    }
    setPosts(posts.map(p => p.id === postId ? { ...p, isSending: true } : p));
    startFetchingTransition(async () => {
      const result = await sendPostAction(destinationChannelId, post.cleanText!, post.selectedImageUrl!);
      if (result.error) {
        alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error}`);
        setPosts(prevPosts => prevPosts.map(p => p.id === postId ? { ...p, isSending: false } : p));
      } else if (result.success) {
        setPosts(prevPosts => prevPosts.map(p => p.id === postId ? { ...p, isSending: false, isSent: true } : p));
      }
    });
  };

  // --- JSX —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
  return (
    <div>
      {/* –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ */}
      <form onSubmit={handleFetchMessages} className="mb-8 space-y-3">
        <div className="flex flex-col sm:flex-row gap-3">
          <input type="text" value={sourceChannelId} onChange={(e) => setSourceChannelId(e.target.value)} placeholder="ID –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—Ç–∫—É–¥–∞ —á–∏—Ç–∞—Ç—å)" required className="flex-grow bg-gray-800 border border-gray-700 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
          <input type="text" value={destinationChannelId} onChange={(e) => setDestinationChannelId(e.target.value)} placeholder="ID –∫–∞–Ω–∞–ª–∞-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∫—É–¥–∞ –ø–æ—Å—Ç–∏—Ç—å)" required className="flex-grow bg-gray-800 border border-gray-700 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500" />
        </div>
        <button type="submit" disabled={isFetching} className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-bold py-2 px-4 rounded-md transition-colors">
          {isFetching && posts.length === 0 ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã'}
        </button>
      </form>

      {/* –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {error && <div className="bg-red-900/50 border border-red-700 text-red-200 p-4 rounded-lg text-center">{error}</div>}
      {isFetching && posts.length === 0 && <div className="text-center text-gray-400">–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞...</div>}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ */}
      <div className="space-y-4 mt-4">
        {posts.map((post) => (
          <div key={post.id} className="border bg-gray-800 rounded-lg p-4 transition-all duration-300 border-gray-700">
            <h3 className="text-xl font-semibold text-gray-400 mb-2">–û—Ä–∏–≥–∏–Ω–∞–ª #{post.id + 1}</h3>
            <p className="text-gray-300 text-sm whitespace-pre-wrap">{post.originalText}</p>
            <div className="flex flex-wrap items-center gap-x-3 gap-y-1 mt-4 pt-3 border-t border-gray-700"><div className="flex items-center gap-1 text-amber-400 rounded-full px-2 py-0.5 text-xs font-bold ml-auto"><span>üèÜ</span><span>{post.reactions}</span></div></div>

            {/* –ë–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="mt-4 pt-4 border-t border-dashed border-gray-700 space-y-3">
              <div className="flex gap-4">
                <button onClick={() => handleRewrite(post.id)} disabled={isFetching || post.isRewriting} className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white font-bold py-2 px-5 rounded-md transition-colors text-sm w-full">{post.isRewriting ? '–†–µ—Ä–∞–π—Ç...' : '‚ú® –°–¥–µ–ª–∞—Ç—å —Ä–µ—Ä–∞–π—Ç'}</button>
                <button onClick={() => handleGenerateImage(post.id)} disabled={isFetching || !post.prompt || post.prompt === 'no prompt' || post.isGeneratingImage} className="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white font-bold py-2 px-5 rounded-md transition-colors text-sm w-full">{post.isGeneratingImage ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è (x3)...' : 'üé® –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ç—ã (x3)'}</button>
              </div>

              {/* –ë–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
              {post.cleanText && (
                <div className="mt-4 pt-4 border-t-2 border-dashed border-purple-400/30 space-y-4 animate-fade-in">
                  <div><h4 className="text-sm font-bold text-purple-400 mb-2">üí° –†–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞:</h4><p className="text-gray-300 text-sm bg-gray-900 p-3 rounded-md whitespace-pre-wrap">{post.cleanText}</p></div>
                  {post.prompt && post.prompt !== 'no prompt' && (<div><h4 className="text-sm font-bold text-purple-400 mb-2">üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Eng):</h4><p className="text-gray-400 text-xs bg-gray-900 p-3 rounded-md font-mono">{post.prompt}</p></div>)}

                  {/* –°–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
                  {post.imageUrls && (
                    <div>
                      <h4 className="text-sm font-bold text-green-400 mb-2">‚úÖ –®–∞–≥ 1: –ì–æ—Ç–æ–≤–æ! &nbsp; &nbsp; üëâ –®–∞–≥ 2: –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞</h4>
                      <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 mt-3">
                        {post.imageUrls.map((url, index) => (
                          // –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ó–∞–º–µ–Ω—è–µ–º <img> –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç <Image>
                          <Image
                            key={index}
                            src={url}
                            alt={`Generated Art Option ${index + 1}`}
                            // –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ width –∏ height.
                            // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç Next.js –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
                            width={512}
                            height={512}
                            onClick={() => handleSelectImage(post.id, url)}
                            className={`rounded-lg cursor-pointer transition-all duration-200 border-4 ${
                              post.selectedImageUrl === url
                                ? 'border-teal-500 opacity-100' // –°—Ç–∏–ª—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                                : 'border-transparent opacity-60 hover:opacity-100' // –°—Ç–∏–ª—å –¥–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                            }`}
                          />
                        ))}
                      </div>
                    </div>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ */}
                  {post.selectedImageUrl && (
                    <div className="mt-4 pt-4 border-t border-dashed border-gray-700">
                      <button onClick={() => handleSendPost(post.id)} disabled={isFetching || post.isSending || post.isSent} className="w-full bg-teal-600 hover:bg-teal-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-bold py-2 px-5 rounded-md transition-colors text-sm">
                        {post.isSending ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : post.isSent ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úîÔ∏è' : 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤ Telegram'}
                      </button>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
