// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Существующие модели для NextAuth (не трогаем)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tokens        UserToken[] // Добавить связь с токенами
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Модель для токенов пользователей (существующая)
model UserToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  name      String?  // Название токена (опционально)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  expiresAt DateTime? // Опциональная дата истечения
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
}

// НОВЫЕ ТАБЛИЦЫ для токен-авторизации
model ApiUser {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  
  tokens    ApiToken[]
  histories ApiHistory[]
}

model ApiToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  name      String?  // Название токена (опционально)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  expiresAt DateTime? // Опциональная дата истечения
  
  user ApiUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
}

// Таблица для истории AI запросов
model ApiHistory {
  id        String   @id @default(cuid())
  userId    String
  prompt    String
  mode      String   // 'text', 'html', 'images', 'videos'
  model     String?  // Для изображений: 'Imagen 4', 'Flux', etc. Для видео: 'Veo 2', 'Veo 3', etc.
  results   Json?    // Результаты в JSON формате
  createdAt DateTime @default(now())
  
  user ApiUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}